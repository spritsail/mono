`configure' configures mono 5.12.0.226 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/mono]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names

X features:
  --x-includes=DIR    X include files are in DIR
  --x-libraries=DIR   X library files are in DIR

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]
  --target=TARGET   configure for building compilers for TARGET [HOST]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-wasm    Hack to set the current runtime to target wasm
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-rpath         do not hardcode runtime library paths
  --disable-visibility-hidden    disable usage of -fvisiblity=hidden
  --disable-solaris-tar-check    disable solaris tar check
  --disable-nls           do not use Native Language Support
  --enable-werror Pass -Werror to the C compiler
  --disable-libraries disable the build of libmono
  --disable-mcs-build disable the build of the mcs directory
  --disable-support-build disable the build of the support directory
  --enable-small-config Enable tweaks to reduce requirements (and capabilities)
  --enable-system-aot  Enable the Ahead-Of-Time compilation of system assemblies during the build (on by default on some platforms)
  --enable-minimal=LIST      drop support for LIST subsystems.
     LIST is a comma-separated list from: aot, profiler, decimal, pinvoke, debug, appdomains, verifier,
     reflection_emit, reflection_emit_save, large_code, logging, com, ssa, generics, attach, jit, interpreter, simd, soft_debug, perfcounters, normalization, desktop_loader, shared_perfcounters, remoting,
	 security, lldb, mdb, sgen_remset, sgen_marksweep_par, sgen_marksweep_fixed, sgen_marksweep_fixed_par, sgen_copying.
  --disable-executables disable the build of the runtime executables
  --enable-extension-module=LIST enable the core-extensions from LIST
  --enable-gsharedvt Enable generic valuetype sharing (Deprecated)
  --disable-boehm            Disable the Boehm GC.
  --enable-parallel-mark     Enables Boehm GC Parallel Marking
  --disable-dev-random    disable the use of the random device (enabled by default)
  --disable-bcl-opt	BCL is compiled with no optimizations (allows accurate BCL debugging)
  --enable-big-arrays	Enable the allocation and indexing of arrays greater than Int32.MaxValue
  --enable-dtrace	Enable DTrace probes
  --enable-llvm	Enable the LLVM back-end
  --enable-loadedllvm	Load the LLVM back-end dynamically
  --enable-llvm-version-check Check that the LLVM matches the version expected by mono
  --enable-llvm-runtime	Enable runtime support for llvmonly code
  --enable-vtune	Enable the VTUNE back-end
  --enable-icall-symbol-map Generate tables which map icall functions to their C symbols
  --enable-icall-export Export icall functions
  --disable-icall-tables Disable the runtime lookup of icalls
  --enable-checked-build=LIST      To enable checked build (expensive asserts), configure with a comma-separated LIST of checked build modules and then include that same list in the environment variable MONO_CHECK_MODE at runtime. Recognized checked build modules: all, gc, metadata, thread
  --disable-btls             Disable the BoringTls provider
  --disable-btls-lib             Disable building the BTLS native library

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic[=PKGS]       try to use only PIC/non-PIC objects [default=use
                          both]
  --with-aix-soname=aix|svr4|both
                          shared library versioning (aka "SONAME") variant to
                          provide on AIX, [default=aix].
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-sysroot[=DIR]    Search for dependent libraries within DIR (or the
                          compiler's sysroot if not specified).
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --with-mcs-path=/path/to/mcs      Specify an alternate mcs source tree
  --with-jumptables=yes,no      enable/disable support for jumptables (ARM-only for now) (defaults to no)
  --with-crosspkgdir=/path/to/pkg-config/dir      Change pkg-config dir to custom dir
  --with-tls=__thread,pthread    select Thread Local Storage implementation (defaults to __thread)
  --with-sigaltstack=yes,no      enable/disable support for sigaltstack (defaults to yes)
  --with-static_mono=yes,no      link mono statically to libmono (faster) (defaults to yes)
  --with-shared_mono=yes,no      build a shared libmono library (defaults to yes)
  --with-xen_opt=yes,no          Enable Xen-specific behaviour (defaults to yes)
  --with-csc=mcs,roslyn,default      Configures the CSharp compiler to use
  --with-jemalloc=yes,no               If jemalloc is enabled (defaults to no)
  --with-jemalloc_always=yes,no        If jemalloc is enabled and always used (defaults to yes)
  --with-jemalloc_assert=yes,no        If jemalloc performs runtime checks for memory correctness (defaults to no)
  --with-profile4_x=yes,no            If you want to install the 4.x FX (defaults to yes)
  --with-monodroid=yes,no             If you want to build the MonoDroid assemblies (defaults to no)
  --with-monotouch=yes,no             If you want to build the Xamarin.iOS assemblies (defaults to no)
  --with-monotouch_watch=yes,no       If you want to build the Xamarin.WatchOS assemblies (defaults to no)
  --with-monotouch_tv=yes,no          If you want to build the Xamarin.TVOS assemblies (defaults to no)
  --with-bitcode=yes,no               If bitcode is enabled (defaults to no)
  --with-xammac=yes,no                If you want to build the Xamarin.Mac assemblies (defaults to no)
  --with-testing_aot_hybrid=yes,no    If you want to build the testing_aot_hybrid assemblies (defaults to no)
  --with-testing_aot_full=yes,no      If you want to build the testing_aot_full assemblies (defaults to no)
  --with-winaot=yes,no                If you want to build the Windows friendly AOT assemblies (defaults to no)
  --with-orbis=yes,no                 If you want to build the Orbis assemblies (defaults to no)
  --with-unreal=yes,no                If you want to build the Unreal assemblies (defaults to no)
  --with-wasm=yes,no                  If you want to build the WebAssembly (defaults to no)
  --with-runtime_preset=net_4_x,all,aot,hybridaot,fullaot,bitcode,unreal   Which default profile to build (defaults to net_4_x)
  --with-spectre-mitigation=yes,no   If you want to build the runtime with compiler flags that enable Spectre mitigation (defaults to no)
  --with-spectre-indirect-branch-choice=keep,thunk,inline,extern   Convert indirect branches to the specified kind of thunk (defaults to inline)
  --with-spectre-function-return-choice=keep,thunk,inline,extern   Convert function return instructions to the specified kind of thunk (defaults to inline)
  --with-libgc=included,none  Controls the Boehm GC config, default=included
  --with-large-heap=yes,no       Enable support for GC heaps larger than 3GB (defaults to no)
  --with-ikvm-native=yes,no      build the IKVM JNI interface library (defaults to yes)
  --with-cross-offsets=<offsets file path>    Explicit AOT cross offsets file
  --with-llvm=<llvm prefix>    Enable the LLVM back-end
  --with-vtune=<vtune prefix>	Enable jit vtune profiling
  --with-sgen=yes,no             Extra Generational GC, default=yes
  --with-sgen-default-concurrent=yes,no             Use Concurrent GC, default=no
  --with-x                use the X Window System
  --with-overridable-allocators	allow g_*alloc/g_free to call custom allocators set via g_mem_set_vtable
  --with-libgdiplus=installed|sibling|<path>	Override the libgdiplus used for System.Drawing tests (defaults to installed)
  --with-malloc-mempools=yes,no  Use malloc for each single mempool allocation (only for runtime debugging, defaults to no)
  --with-mcs-docs=yes,no         If you want to build the documentation under mcs (defaults to yes)
  --with-lazy-gc-thread-creation=yes|no      Enable lazy runtime thread creation, embedding host must do it explicitly (defaults to no)
  --with-cooperative-gc=yes|no      Enable cooperative stop-the-world garbage collection (sgen only) (defaults to no)
  --with-btls-android-ndk        Android NDK for BoringTls

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CCAS        assembler compiler command (defaults to CC)
  CCASFLAGS   assembler compiler flags (defaults to CFLAGS)
  CPP         C preprocessor
  LT_SYS_LIBRARY_PATH
              User-defined run-time library search path.
  CXXCPP      C++ preprocessor
  XMKMF       Path to xmkmf, Makefile generator for X Window System

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <https://github.com/mono/mono/issues/new>.

